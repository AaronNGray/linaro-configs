#See http://docs.openstack.org/infra/jenkins-job-builder/genindex.html
- job:
    name: tcwg-benchmark
    project-type: freestyle
    node: master
    display-name: 'TCWG Benchmark'
    description: 'Dispatch TCWG benchmark jobs to LAVA'
    logrotate:
        daysToKeep: 30
        numToKeep: 30
        artifactNumToKeep: 1
    properties:
        - authorization:
            anonymous:
                - job-read
                - job-extended-read
            bernie.ogden@linaro.org:
                - job-build
                - job-cancel
        - copyartifact:
            projects: post-build-lava
    parameters:
        - choice:
            name: BENCHMARK
            choices:
              - CPU2006
              - CPU2000
              - EEMBC
              - fakebench
        - choice:
            name: TARGET_CONFIG
            choices:
              - Arndale
              - Mustang
              - Panda-ES
              - Juno-A53
              - Juno-A57
              - KVM (x86_64)
        - string:
            name: RUN_FLAGS
            default: '--size test --iterations 1 --tune base'
            description: |
              Flags passed to benchmark framework at runtime.
              Examples --
              SPEC -- --size test --iterations 1 int (run 1 iteration of the int suite using the test workload)
        - string:
            name: PREBUILT
            description: |
              A prebuilt benchmark tarball as produced by abe or direct make invocation.
              If produced by abe, tar up the contents of build/<host>/<target>.
              If produced by direct make, tar up the top-level git repository (but you can exclude the .git dir).
              If this option is given, no build will be performed and the compiler_flags and make_flags fields will be ignored.
        - string:
            name: TOOLCHAIN
            default: 'http://releases.linaro.org/14.09/components/toolchain/binaries/gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz'
            description: |
              Toolchain to use - use local filesystem path, or formats interpretable by wget or scp/rsync.
              Must be supplied even when using a prebuilt tarball. Benchmarking scripts will use tools such as objdump.
              Examples --
              /usr/bin/gcc
              http://releases.linaro.org/14.09/components/toolchain/binaries/gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz
              my.name@my.server:location_of_my_benchmark
        - string:
            name: COMPILER_FLAGS
            default: '-march=armv8-a'
            description: SPEC benchmarks built -O3 -fno-common, unless you override that here.
        - string:
            name: MAKE_FLAGS
            default: ''
            description: Flags to pass to make, when building the benchmark.
        #TODO Remove this when we have the uinstance - at that point, we should be using the benchmarking branch
        - string:
            name: ABE_REVISION
            default: origin/benchmarking
            description: Branch of abe to drive the run
    scm:
        - git:
            url: https://git.linaro.org/toolchain/abe.git
            branches:
              - ${ABE_REVISION}
            skip-tag: true
            shallow-clone: true
            wipe-workspace: true
    wrappers:
        - timeout:
            timeout: 120
    builders:
      - shell: |
          #!/bin/bash

          set -ex

          TARGET_CONFIG="${TARGET_CONFIG,,}"

          #TODO Benchmarking-specific builds will eliminate these special cases
          target_session=config/bench/lava/target-session
          if test x"${TARGET_CONFIG}" = xkvm; then
            target_session="${target_session}-kvm.yaml"
          elif test x"${TARGET_CONFIG}" = xmustang; then
            target_session="${target_session}-mustang.yaml"
          else
            target_session="${target_session}.yaml"
          fi
          if test x"${TARGET_CONFIG%%-*}" = xjuno; then
            target_device_type=juno
          else
            target_device_type="${TARGET_CONFIG}"
          fi

          #Parameters for post-build-lava
          cat << EOF > post_build_lava_parameters
          CUSTOM_JSON_URL=${BUILD_URL}/artifact/lava-jobdef.json

          #DEVICE_TYPE to placate pbl - we don't actually use it
          DEVICE_TYPE=${target_device_type}
          EOF

          #Parameters to be substituted into template
          export JOB_NAME=${BENCHMARK}

          #BENCHMARK set as parameter
          #TOOLCHAIN set as parameter
          #RUN_FLAGS set as parameter
          #COMPILER_FLAGS set as parameter
          #MAKE_FLAGS set as parameter
          #PREBUILT set as parameter

          export HOST_SESSION=config/bench/lava/trusted-host-session.yaml
          export HOST_IMAGE=http://images.validation.linaro.org/ubuntu-14-04-server-base.img.gz

          export TARGET_SESSION=${target_session}
          #TODO Map from target types to specific images
          export TARGET_IMAGE=http://images.validation.linaro.org/ubuntu-14-04-server-base.img.gz
          #TARGET_CONFIG set as parameter
          export TARGET_DEVICE_TYPE=${target_device_type}

          #TODO Change to uinstance server and 'safe benchmarks' user, when they exist
          export LAVA_SERVER=validation.linaro.org/RPC2/
          export BUNDLE_STREAM_NAME=/anonymous/bogden

          export ABE_REPO=https://git.linaro.org/toolchain/abe
          #TODO Fix this to appropriate branch when we have the uinstance
          export ABE_REVISION=${ABE_REVISION:-bernie/benchmarking-uinstance}

          export TIMEOUT=691200
          #End of parameters to substitute into template

          #Convert YAML to JSON
          git clone -b arbitrary git://git.linaro.org/people/bernie.ogden/lci-build-tools lci-build-tools

          yaml_url=https://git.linaro.org/people/bernie.ogden/lava-jobs.git/blob_plain/HEAD:/benchmark/template-test.yaml
          wget ${yaml_url}

          ./lci-build-tools/yaml-to-json.py "`basename ${yaml_url}`" > lava-jobdef.json

    publishers:
      - archive:
          artifacts: lava-jobdef.json
      - trigger-parameterized-builds:
        - project: post-build-lava
          condition: SUCCESS
          property-file: post_build_lava_parameters
      - email:
          recipients: 'bernie.ogden@linaro.org'
