- job:
    name: lt-qcom-ubuntu-images-arm64
    project-type: freestyle
    defaults: global
    logrotate:
        daysToKeep: 30
        numToKeep: 30
    properties:
        - authorization:
            anonymous:
                - job-read
                - job-extended-read
                - job-workspace
            linaro-landing-team-qualcomm-personnel:
                - job-build
                - job-cancel
    parameters:
        - string:
            name: BUNDLE_STREAM_NAME
            default: '/public/team/linaro/lt-qualcomm/'
        - string:
            name: DEVICE_TYPE
            default: 'dragonboard-410c'
        - string:
            name: LAVA_SERVER
            default: 'validation.linaro.org/RPC2/'
        - string:
            name: UBUNTU_FLAVOUR
            default: 'vivid'
        - string:
            name: PLATFORM_NAME
            default: 'qcom-snapdragon-arm64'
        - string:
            name: ROOTFS
            default: 'developer alip'
        - string:
            name: DTBS
            default: 'msm8916-mtp.dtb apq8016-sbc.dtb'
        - string:
            name: SERIAL_CONSOLE
            default: 'ttyMSM0'
        - string:
            name: KERNEL_BRANCH
            default: 'release/qcomlt-4.0'
    disabled: false
    node: docker-utopic
    display-name: 'Qualcomm Ubuntu based images (arm64)'
    scm:
        - git:
            url: https://git.linaro.org/git/landing-teams/working/qualcomm/kernel.git
            refspec: +refs/heads/${KERNEL_BRANCH}:refs/remotes/origin/${KERNEL_BRANCH}
            name: origin
            branches:
                - refs/heads/${KERNEL_BRANCH}
            skip-tag: true
            shallow-clone: true
            wipe-workspace: false
    wrappers:
        - timestamps
        - build-name:
            name: '#${BUILD_NUMBER}-${GIT_REVISION,length=8}'
    builders:
        - linaro-publish-token:
            host: builds.96boards.org
        - shell: |
            #!/bin/bash

            set -ex

            trap cleanup_exit INT TERM EXIT

            cleanup_exit()
            {
              cd ${WORKSPACE}
              sudo kpartx -dv out/linaro-${UBUNTU_FLAVOUR}-*.sd.img || true
              rm -rf lci-build-tools
              rm -rf builddir*
              rm -rf out
              git clean -fdx
            }

            sudo apt-get install -y kpartx python-pycurl device-tree-compiler
            wget http://repo.linaro.org/ubuntu/linaro-overlay/pool/main/a/android-tools/android-tools-fsutils_4.2.2+git20130218-3ubuntu41+linaro1_amd64.deb
            sudo dpkg -i --force-all android-tools-fsutils_*.deb

            # get the boot image tools, and keep track of commit info in the traces
            git clone git://codeaurora.org/quic/kernel/skales
            (cd skales && git log -1)
            export PATH=`pwd`/skales:$PATH

            export LANG=C
            export make_bootwrapper=false
            export make_install=true
            export kernel_flavour=lt-qcom
            export kernel_config=defconfig
            export MAKE_DTBS=true
            export ARCH=arm64
            export tcbindir="${HOME}/srv/toolchain/arm64-tc-14.09/bin"
            export toolchain_url=http://releases.linaro.org/14.09/components/toolchain/binaries/gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz

            test -d lci-build-tools || git clone https://git.linaro.org/git/ci/lci-build-tools.git lci-build-tools
            bash -x lci-build-tools/jenkins_kernel_build_inst

            # Create the hardware pack
            cat << EOF > linaro-lt-qcom
            format: '3.0'
            name: linaro-lt-qcom
            architectures:
            - arm64
            origin: Linaro
            maintainer: Linaro Platform <linaro-dev@lists.linaro.org>
            support: supported
            serial_tty: ${SERIAL_CONSOLE}
            kernel_addr: '0x80208000'
            initrd_addr: '0x83000000'
            load_addr: '0x60008000'
            dtb_addr: '0x61000000'
            partition_layout: bootfs_rootfs
            mmc_id: '0:1'
            kernel_file: boot/Image-*-qcom
            initrd_file: boot/initrd.img-*-qcom
            dtb_file: lib/firmware/*-qcom/device-tree/msm8916-mtp.dtb
            boot_script: boot.scr
            boot_min_size: 64
            extra_serial_options:
            - console=tty0
            - console=${SERIAL_CONSOLE},115200n8
            assume_installed:
            - linaro-headless
            - linux-firmware
            packages:
            - linux-image-generic
            - linux-headers-generic
            - libdrm2
            - libdrm-freedreno1
            - libdrm-nouveau2
            - libdrm-radeon1
            - libegl1-mesa
            - libegl1-mesa-drivers
            - libgbm1
            - libgl1-mesa-dri
            - libgl1-mesa-glx
            - libglapi-mesa
            - libgles1-mesa
            - libgles2-mesa
            - libosmesa6
            - libwayland-egl1-mesa
            - libxatracker2
            - xserver-xorg-video-freedreno
            - mesa-utils
            sources:
              qcom: http://repo.linaro.org/ubuntu/qcom-overlay ${UBUNTU_FLAVOUR} main
              repo: http://repo.linaro.org/ubuntu/linaro-overlay ${UBUNTU_FLAVOUR} main
              ubuntu: http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_FLAVOUR} main universe
            EOF

            VERSION=`date +%Y%m%d`-${BUILD_NUMBER}
            linaro-hwpack-create --debug linaro-lt-qcom ${VERSION}
            linaro-hwpack-replace -t `ls hwpack_linaro-lt-qcom_*_arm64_supported.tar.gz` -p `ls linux-image-*-linaro-lt-qcom_*.deb` -r linux-image -d -i
            linaro-hwpack-replace -t `ls hwpack_linaro-lt-qcom_*_arm64_supported.tar.gz` -p `ls linux-headers-*-linaro-lt-qcom_*.deb` -r linux-headers -d -i

            cat > out/README.txt << EOF
            This build is using artifacts from the following builds:
            EOF

            for rootfs in ${ROOTFS}; do
              # Get rootfs
              export ROOTFS_BUILD_NUMBER=`wget -q --no-check-certificate -O - https://ci.linaro.org/jenkins/job/ubuntu-arm64-rootfs/label=build,rootfs=${rootfs}/lastSuccessfulBuild/buildNumber`
              export ROOTFS_BUILD_TIMESTAMP=`wget -q --no-check-certificate -O - https://ci.linaro.org/jenkins/job/ubuntu-arm64-rootfs/label=build,rootfs=${rootfs}/lastSuccessfulBuild/buildTimestamp?format=yyyyMMdd`
              export ROOTFS_BUILD_URL="http://snapshots.linaro.org/ubuntu/images/${rootfs}-arm64/${ROOTFS_BUILD_NUMBER}/linaro-${UBUNTU_FLAVOUR}-${rootfs}-${ROOTFS_BUILD_TIMESTAMP}-${ROOTFS_BUILD_NUMBER}.tar.gz"
              wget --progress=dot -e dotbytes=2M ${ROOTFS_BUILD_URL}

              # Create pre-built image(s)
              linaro-media-create --dev fastmodel --output-directory ${WORKSPACE}/out --image-file linaro-${UBUNTU_FLAVOUR}-${rootfs}-${PLATFORM_NAME}-${VERSION}.sd.img --image-size 2G --binary linaro-${UBUNTU_FLAVOUR}-${rootfs}-${ROOTFS_BUILD_TIMESTAMP}-${ROOTFS_BUILD_NUMBER}.tar.gz --hwpack hwpack_linaro-lt-qcom_*.tar.gz --hwpack-force-yes --bootloader uefi

              # Create eMMC rootfs image(s)
              mkdir rootfs
              for device in $(sudo kpartx -av out/linaro-${UBUNTU_FLAVOUR}-${rootfs}-${PLATFORM_NAME}-${VERSION}.sd.img | cut -d' ' -f3); do
                partition=$(echo ${device} | cut -d'p' -f3)
                [ "${partition}" = "2" ] && sudo mount -o loop /dev/mapper/${device} rootfs
              done

              sudo ln -sf /run/resolvconf/resolv.conf rootfs/etc/resolv.conf

              [ "${rootfs}" = "developer" ] && cat << EOF | sudo tee rootfs/etc/network/interfaces.d/eth0
            #auto eth0
            #iface eth0 inet dhcp
            EOF

              sudo rm -rf rootfs/dev rootfs/boot rootfs/var/lib/apt/lists
              sudo mkdir rootfs/dev rootfs/boot rootfs/var/lib/apt/lists

              # clean up fstab
              sudo sed -i '/UUID/d' rootfs/etc/fstab

              # add license file in the generated rootfs
              rm -f license.txt
              wget https://git.linaro.org/landing-teams/working/qualcomm/lt-docs.git/blob_plain/HEAD:/license/license.txt
              sudo cp -f license.txt rootfs/etc/license.txt

              # add firmware (adreno, venus and WCN)
              wget -qO- https://builds.96boards.org/snapshots/dragonboard410c/binaries/20150616/firmware.tar.gz | sudo tar xzv -C rootfs/lib/firmware

              sudo make_ext4fs -o -L rootfs -l 6800M -s out/linaro-${UBUNTU_FLAVOUR}-${rootfs}-${PLATFORM_NAME}-${VERSION}.img rootfs/
              sudo umount rootfs
              sudo kpartx -dv out/linaro-${UBUNTU_FLAVOUR}-${rootfs}-${PLATFORM_NAME}-${VERSION}.sd.img
              sudo rm -rf rootfs out/linaro-${UBUNTU_FLAVOUR}-${rootfs}-${PLATFORM_NAME}-${VERSION}.sd.img

              # Compress image(s)
              gzip -9 out/linaro-${UBUNTU_FLAVOUR}-${rootfs}-${PLATFORM_NAME}-${VERSION}.img

              cat >> out/README.txt << EOF
            Linaro Ubuntu ${rootfs} build: http://snapshots.linaro.org/ubuntu/images/${rootfs}-arm64/${ROOTFS_BUILD_NUMBER}
            EOF
            done

            # Move all relevant DTBs in out/
            for f in ${DTBS} ; do
              mv out/dtbs/${f} out/
            done
            rm -rf out/dtbs

            # Create device tree table
            dtbTool -o out/dt.img -s 2048 out/

            # Create boot image
            mkbootimg \
              --kernel out/Image \
              --ramdisk out/initrd.img-* \
              --output out/boot-linaro-${UBUNTU_FLAVOUR}-${PLATFORM_NAME}-${VERSION}.img \
              --dt out/dt.img \
              --pagesize "2048" \
              --base "0x80000000" \
              --cmdline "root=/dev/disk/by-partlabel/rootfs rw rootwait console=tty0 console=${SERIAL_CONSOLE},115200n8 text"
            gzip -9 out/boot-linaro-${UBUNTU_FLAVOUR}-${PLATFORM_NAME}-${VERSION}.img

            # Final preparation for publishing
            cp -a linux-*.deb out/

            # Create MD5SUMS file
            (cd out && md5sum * > MD5SUMS.txt)

            # Publish to snapshots
            test -d ${HOME}/bin || mkdir ${HOME}/bin
            wget https://git.linaro.org/ci/publishing-api.git/blob_plain/HEAD:/linaro-cp.py -O ${HOME}/bin/linaro-cp.py
            wget -q https://git.linaro.org/ci/job/configs.git/blob_plain/HEAD:/lt-qcom-ubuntu-images-arm64/build-info/template.txt -O out/BUILD-INFO.txt
            time python ${HOME}/bin/linaro-cp.py \
              --server ${PUBLISH_SERVER} \
              --build-info out/BUILD-INFO.txt \
              out snapshots/dragonboard410c/ubuntu/${BUILD_NUMBER}
    publishers:
        - email:
            recipients: 'nicolas.dechesne@linaro.org fathi.boudra@linaro.org'
        - ircbot:
            channels:
                - name: '#linaro-lt-qcomm'
                  password: ${LT_QCOM_KEY}
